import telebot
import json
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

API_TOKEN = '7338566190:AAGtOOMI8StYiU5HZ2vrkWY12QtIR6iL1n4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHANNEL_ID = '-1002302094356'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
bot = telebot.TeleBot(API_TOKEN)
scheduler = BackgroundScheduler()

DATA_FILE = 'user_data.json'  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}
photo_buffer = {}  # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ –∫–æ–Ω—Ü–∞ —á–∞—Å–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_data
    try:
        with open(DATA_FILE, 'r') as file:
            user_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, 'w') as file:
        json.dump(user_data, file)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ"
def get_photo_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ"))
    return keyboard

# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in user_data:
        user_data[user_id] = {'name': '', 'counter': 0, 'total_strikes': 0, 'has_sent_photo': False}
        bot.send_message(user_id, "–í–∞—à–µ —ñ–º‚Äô—è: üçÖ", reply_markup=ReplyKeyboardRemove())
        print(f"–°—Ç–∞—Ä—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        save_data()
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ"
        bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.", reply_markup=get_photo_keyboard())

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['name'] == '')
def set_name(message):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text
    save_data()

    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ"
    bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}üçÖ! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.", reply_markup=ReplyKeyboardRemove())  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ"
@bot.message_handler(func=lambda message: message.text == "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ")
def prompt_photo(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id]['name']:
        bot.send_message(user_id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤–æ—î —Ñ–æ—Ç–æ —Å—é–¥–∏ üì∏")
    else:
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '–ü–æ—á–Ω–µ–º–æ' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id]['name']:
        user_data[user_id]['counter'] += 1
        user_data[user_id]['total_strikes'] += 1
        user_data[user_id]['has_sent_photo'] = True
        save_data()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –±—É—Ñ–µ—Ä
        if user_id not in photo_buffer:
            photo_buffer[user_id] = []
        photo_buffer[user_id].append({
            'file_id': message.photo[-1].file_id,
            'caption': f"{user_data[user_id]['name']} - —Å—Ç—Ä–∞–π–∫ {user_data[user_id]['counter']} –∏–∑ 100"
        })

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–π–∫–æ–≤
        current_count = user_data[user_id]['counter']
        total_strikes = user_data[user_id]['total_strikes']
        bot.send_message(user_id, f"–°—É–ø–µ—Ä üëç –º–æ–ª–æ–¥–µ—Ü—å üòé! +1\n"
                                  f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–∞–π–∫—ñ–≤ –∑–∞—Ä–∞–∑: {current_count} –∏–∑ 100\n"
                                  f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–∞–π–∫—ñ–≤: {total_strikes}")
    else:
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '–ü–æ—á–Ω–µ–º–æ' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

def send_hourly_statistics():
    stats_message = "–°—Ç—Ä–∞–π–∫–∏ —É—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤:\n"
    for user_id, data in user_data.items():
        name = data['name'] if data['name'] else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        stats_message += f"{name} - —Å—Ç—Ä–∞–π–∫ {data['counter']} –∏–∑ 100\n"

    bot.send_message(CHANNEL_ID, stats_message)

    for user_id, photos in photo_buffer.items():
        for photo in photos:
            bot.send_photo(CHANNEL_ID, photo['file_id'], caption=photo['caption'])

    photo_buffer.clear()

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
scheduler.add_job(send_hourly_statistics, CronTrigger(minute=0, hour='*'))

# –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö —Ñ–æ—Ç–æ
def reset_counter(user_id):
    name = user_data[user_id]['name']
    user_data[user_id]['counter'] = 0
    user_data[user_id]['has_sent_photo'] = False
    bot.send_message(user_id, f"–ù—É —Ç–∏ —ñ –ø–æ–º—ñ–¥–æ—Ä–∫–∞, {name} üçÖ")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ" –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π —Å–≤–æ—î —Ñ–æ—Ç–æ –∑–Ω–æ–≤—É üì∏", reply_markup=get_photo_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
def check_and_reset_counters():
    for user_id, data in user_data.items():
        if not data['has_sent_photo']:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
            reset_counter(user_id)
        else:
            data['counter'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
            data['has_sent_photo'] = False
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ" –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
            bot.send_message(user_id, "–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π —Å–≤–æ—î —Ñ–æ—Ç–æ –∑–Ω–æ–≤—É üì∏", reply_markup=get_photo_keyboard())
    save_data()

scheduler.add_job(check_and_reset_counters, CronTrigger(minute=0, hour='*'))

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –±–æ—Ç–∞
scheduler.start()
bot.polling()
