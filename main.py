import telebot
import json
import logging
#import os 
from config import ADMINS  
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from config import admin_panel

#import sys
#sys.path.append('/Users/admin/Downloads/ACupOfRun-bot')  
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç admin_panel
print(admin_panel.get_info())  # –í—ã–≤–µ–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–Ω–µ–ª–∏

API_TOKEN = '7338566190:AAGtOOMI8StYiU5HZ2vrkWY12QtIR6iL1n4'
CHANNEL_ID = '-1002302094356'
DATA_FILE = 'user_data.json'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
ADMINS = [ 922094773] 
# –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
print(admin_panel.get_info())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot = telebot.TeleBot(API_TOKEN, threaded=True, num_threads=4)
scheduler = BackgroundScheduler()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
photo_buffer = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_data
    try:
        with open(DATA_FILE, 'r') as file:
            user_data = json.load(file)
            logging.info("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}
        logging.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    try:
        with open(DATA_FILE, 'w') as file:
            json.dump(user_data, file, indent=4)
            logging.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞
    print(f"ADMINS: {ADMINS}, type: {type(ADMINS)}")
    print(f"user_id: {user_id}, type: {type(user_id)}")

    if user_id not in user_data:
        user_data[user_id] = {'name': '', 'counter': 0, 'has_sent_photo': False}
        bot.send_message(user_id, "–í–∞—à–µ —ñ–º‚Äô—è: üçÖ")
        save_data()
    else:
        bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.")

    if user_id in ADMINS:
        bot.send_message(user_id, "–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        admin_panel(message)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['name'] == '')
def set_name(message):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text.strip()
    save_data()
    bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id]['name']:
        user_data[user_id]['counter'] += 1
        user_data[user_id]['has_sent_photo'] = True
        save_data()
        bot.send_message(user_id, f"–°—É–ø–µ—Ä üëç –º–æ–ª–æ–¥–µ—Ü—å üòé\n–°—Ç—Ä–∞–π–∫ {user_data[user_id]['counter']} –∑ 100")
        if user_id not in photo_buffer:
            photo_buffer[user_id] = []
        photo_buffer[user_id].append(message.photo[-1].file_id)
    else:
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '/start' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_reminders():
    for user_id, data in user_data.items():
        if data['name'] and not data['has_sent_photo']:
            reminder_message = "–ß–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ üòä" if data['counter'] < 3 else "–û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å üò¢"
            bot.send_message(user_id, reminder_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
def send_good_morning():
    try:
        bot.send_message(CHANNEL_ID, "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!")
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ '–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ '–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!': {e}")

# –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ has_sent_photo
def reset_reminders():
    for user_id in user_data:
        user_data[user_id]['has_sent_photo'] = False
    save_data()
    logging.info("–§–ª–∞–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω—ã.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
def send_grouped_stats_and_photos_hourly():
    stats_message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–π–∫–æ–≤:\n"
    for user_id, data in user_data.items():
        name = data['name'] or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        stats_message += f"{name} - —Å—Ç—Ä–∞–π–∫ {data['counter']} –∑ 100\n"
        if data['counter'] == 0:
            stats_message += f"{name} - –ø–æ–º—ñ–¥–æ—Ä–∫–∞ üçÖ\n"
    bot.send_message(CHANNEL_ID, stats_message)

    for user_id, photos in photo_buffer.items():
        for photo_id in photos:
            caption = f"–§–æ—Ç–æ –≤—ñ–¥ {user_data[user_id]['name']} - —Å—Ç—Ä–∞–π–∫ {user_data[user_id]['counter']} –∑ 100"
            bot.send_photo(CHANNEL_ID, photo_id, caption=caption)
    photo_buffer.clear()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler.add_job(send_good_morning, CronTrigger(hour=8, minute=0))  # –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
scheduler.add_job(send_reminders, CronTrigger(minute="1,30,50"))  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 1, 30 –∏ 50 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
scheduler.add_job(reset_reminders, CronTrigger(hour=0, minute=0))  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤
scheduler.add_job(send_grouped_stats_and_photos_hourly, CronTrigger(minute=59))  # –ï–∂–µ—á–∞—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –±–æ—Ç–∞
scheduler.start()
try:
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling()
except Exception as e:
    logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

