import telebot
import json
import os
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7338566190:AAGtOOMI8StYiU5HZ2vrkWY12QtIR6iL1n4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
CHANNEL_ID = '-1002302094356'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
ADMIN_ID = 1166978466  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = telebot.TeleBot(API_TOKEN)
scheduler = BackgroundScheduler()

DATA_FILE = 'user_data.json'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
VIDEO_DIR = 'videos'  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
user_data = {}
photo_buffer = {}  # –ë—É—Ñ–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_data
    try:
        with open(DATA_FILE, 'r') as file:
            user_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, 'w') as file:
        json.dump(user_data, file)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
load_data()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if user_id not in user_data or not user_data[user_id]['name']:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∏–º–µ–Ω–∏, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
        user_data[user_id] = {'name': '', 'counter': 0, 'has_sent_photo': False}
        bot.send_message(user_id, "–í–∞—à–µ —ñ–º‚Äô—è: üçÖ")  # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
        bot.register_next_step_handler(message, set_name)  # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –∏–º—è
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –∏–º—è, –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ
        bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.")
        
    # –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    markup = InlineKeyboardMarkup()
    if user_id == ADMIN_ID and user_data[user_id]['name']:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –∑–∞–¥–∞–Ω–æ
        markup.add(InlineKeyboardButton("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin"))
        bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']} üçÖ –≤–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_name(message):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text.strip()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    save_data()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.")

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    if user_id == ADMIN_ID:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin"))
        bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']} üçÖ –≤–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!" –≤ –∫–∞–Ω–∞–ª
def send_good_morning():
    bot.send_message(CHANNEL_ID , "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_reminder_1min():
    for user_id in user_data:
        if user_data[user_id]['name'] and not user_data[user_id]['has_sent_photo']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ
            bot.send_message(user_id, "–ß–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ üòä")

def send_reminder_30min():
    for user_id in user_data:
        if user_data[user_id]['name'] and not user_data[user_id]['has_sent_photo']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ
            bot.send_message(user_id, "–ù–µ –∑–∞–±—É–¥—å üòè")

def send_reminder_50min():
    for user_id in user_data:
        if user_data[user_id]['name'] and not user_data[user_id]['has_sent_photo']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ
            bot.send_message(user_id, "–û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å üò¢")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id]['name']:
        user_data[user_id]['counter'] += 1
        user_data[user_id]['has_sent_photo'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        save_data()
        bot.send_message(user_id, f"–°—É–ø–µ—Ä üëç –º–æ–ª–æ–¥–µ—Ü—å üòé\n–°—Ç—Ä–∞–π–∫ {user_data[user_id]['counter']} –∑ 100")
        if user_id not in photo_buffer:
            photo_buffer[user_id] = []
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±—É—Ñ–µ—Ä
        photo_buffer[user_id].append(message.photo[-1].file_id)
    else:
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '/start' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
scheduler.add_job(send_good_morning, CronTrigger(minute=0, hour='*'))  # –ö–∞–∂–¥—É—é –Ω–æ—á—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"

# –°—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler.add_job(send_reminder_1min, CronTrigger(minute=1))   # 1-—è –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
scheduler.add_job(send_reminder_30min, CronTrigger(minute=30)) # 30-—è –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
scheduler.add_job(send_reminder_50min, CronTrigger(minute=50)) # 50-—è –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def reset_reminders():
    for user_id in user_data:
        user_data[user_id]['has_sent_photo'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—á–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
    save_data()

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
scheduler.add_job(reset_reminders, CronTrigger(hour=0, minute=0))  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
def send_grouped_stats_and_photos_hourly():
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–π–∫–æ–≤: \n"
    for user_id, data in user_data.items():
        name = data['name'] if data['name'] else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        stats_message += f"{name} - —Å—Ç—Ä–∞–π–∫ {data['counter']} –∑ 100\n"
        if data['counter'] == 0:
            stats_message += f"{name} -  –ø–æ–º—ñ–¥–æ—Ä–∫–∞ üçÖ\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–∞–Ω–∞–ª
    bot.send_message(CHANNEL_ID, stats_message)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    for user_id, photos in photo_buffer.items():
        for photo in photos:
            user_name = user_data[user_id]['name'] if user_id in user_data else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é
            photo_caption = f"–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è –≤—ñ–¥ {user_name} - —Å—Ç—Ä–∞–π–∫ {user_data[user_id]['counter']} –∑ 100"
            bot.send_photo(CHANNEL_ID, photo, caption=photo_caption)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    photo_buffer.clear()

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
scheduler.add_job(send_grouped_stats_and_photos_hourly, CronTrigger(minute=59))  # –í 59-—é –º–∏–Ω—É—Ç—É –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", callback_data="–ü–æ–Ω–µ–¥—ñ–ª–æ–∫"),
        InlineKeyboardButton("–í—ñ–≤—Ç–æ—Ä–æ–∫", callback_data="–í—ñ–≤—Ç–æ—Ä–æ–∫"),
        InlineKeyboardButton("–°–µ—Ä–µ–¥–∞", callback_data="–°–µ—Ä–µ–¥–∞"),
        InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä", callback_data="–ß–µ—Ç–≤–µ—Ä"),
        InlineKeyboardButton("–ü'—è—Ç–Ω–∏—Ü—è", callback_data="–ü'—è—Ç–Ω–∏—Ü—è"),
        InlineKeyboardButton("–°—É–±–æ—Ç–∞", callback_data="–°—É–±–æ—Ç–∞"),
        InlineKeyboardButton("–ù–µ–¥—ñ–ª—è", callback_data="–ù–µ–¥—ñ–ª—è")
    )
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=admin_keyboard())
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
@bot.callback_query_handler(func=lambda call: call.data == "admin")
def admin_panel(call):
    if call.from_user.id == ADMIN_ID:
        bot.send_message(call.message.chat.id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data in ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è'])
def day_selected(call):
    day = call.data
    user_id = call.from_user.id
    if not os.path.exists(VIDEO_DIR):
        os.mkdir(VIDEO_DIR)

    video_path = os.path.join(VIDEO_DIR, f"{day}_video.mp4")
    if os.path.exists(video_path):
        bot.send_message(call.message.chat.id, f"–¢–µ–∫—É—â—î –≤—ñ–¥–µ–æ –¥–ª—è {day} –≤–∂–µ —î. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ.")
        bot.send_video(call.message.chat.id, open(video_path, 'rb'), caption=f"–í—ñ–¥–µ–æ –¥–ª—è {day}")
        bot.send_message(call.message.chat.id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –∑–∞–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–µ–æ.", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞–º—ñ–Ω–∞ –≤—ñ–¥–µ–æ", callback_data=f"replace_{day}")))
    else:
        bot.send_message(call.message.chat.id, f"–î–ª—è {day} —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–µ–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–æ–≤–µ –≤—ñ–¥–µ–æ.")
        bot.register_next_step_handler(call.message, handle_video_upload, day)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
@bot.message_handler(content_types=['video'])
def handle_video_upload(message, day):
    user_id = message.from_user.id
    video_path = os.path.join(VIDEO_DIR, f"{day}_video.mp4")
    video_file = bot.get_file(message.video.file_id)
    file = bot.download_file(video_file.file_path)
    with open(video_path, 'wb') as new_video:
        new_video.write(file)
    bot.send_message(message.chat.id, f"–í—ñ–¥–µ–æ –¥–ª—è {day} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    bot.send_video(message.chat.id, open(video_path, 'rb'))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ–Ω—ã –≤–∏–¥–µ–æ
@bot.callback_query_handler(func=lambda call: call.data.startswith('replace_'))
def replace_video(call):
    day = call.data.split('_')[1]
    bot.send_message(call.message.chat.id, f"–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–æ–≤–µ –≤—ñ–¥–µ–æ –¥–ª—è {day}.")
    bot.register_next_step_handler(call.message, handle_video_upload, day)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()

