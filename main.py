import telebot
import json
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

API_TOKEN = '7338566190:AAGtOOMI8StYiU5HZ2vrkWY12QtIR6iL1n4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
CHANNEL_ID = '-1002302094356'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

bot = telebot.TeleBot(API_TOKEN)
scheduler = BackgroundScheduler()

DATA_FILE = 'user_data.json'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}
photo_buffer = {}  # –ë—É—Ñ–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_data
    try:
        with open(DATA_FILE, 'r') as file:
            user_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, 'w') as file:
        json.dump(user_data, file)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
load_data()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'name': '', 'counter': 0, 'has_sent_photo': False}
        bot.send_message(user_id, "–í–∞—à–µ —ñ–º‚Äô—è: üçÖ")  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–æ—Å–∏–º –∏–º—è
        save_data()
    else:
        bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['name'] == '')
def set_name(message):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text
    save_data()
    bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!" –≤ –∫–∞–Ω–∞–ª
def send_good_morning():
    bot.send_message(CHANNEL_ID , "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!")

def send_reminder_1min():
    for user_id in user_data:
        if user_data[user_id]['name']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            bot.send_message(user_id, "–ß–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ üòä")


def send_reminder_30min():
    for user_id in user_data:
        if user_data[user_id]['name']:
            bot.send_message(user_id, "–ù–µ –∑–∞–±—É–¥—å üòè")

def send_reminder_50min():
    for user_id in user_data:
        if user_data[user_id]['name']:
            bot.send_message(user_id, "–û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å üò¢")

scheduler.add_job(send_good_morning, CronTrigger(minute=0, hour='*'))

# –°—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler.add_job(send_reminder_1min, CronTrigger(minute=1))   # 1-—è –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
scheduler.add_job(send_reminder_30min, CronTrigger(minute=30)) # 30-—è –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
scheduler.add_job(send_reminder_50min, CronTrigger(minute=50)) # 50-—è –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id]['name']:
        user_data[user_id]['counter'] += 1
        user_data[user_id]['has_sent_photo'] = True
        save_data()
        bot.send_message(user_id, f"–°—É–ø–µ—Ä üëç –º–æ–ª–æ–¥–µ—Ü—å üòé\n–°—Ç—Ä–∞–π–∫ {user_data[user_id]['counter']} –∑ 100")
        if user_id not in photo_buffer:
            photo_buffer[user_id] = []
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±—É—Ñ–µ—Ä
        photo_buffer[user_id].append(message.photo[-1].file_id)
    else:
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ '/start' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
def reset_counter(user_id):
    user_data[user_id]['counter'] = 0
    user_data[user_id]['has_sent_photo'] = False
    save_data()
    bot.send_message(user_id, f"–ù—É —Ç–∏ —ñ –ø–æ–º—ñ–¥–æ—Ä–∫–∞, {user_data[user_id]['name']} üçÖ")

# –ï–∂–µ—á–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def send_hourly_stats():
    registered_count = sum(1 for data in user_data.values() if data['name'])
    stats_message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {registered_count}\n"
    for user_id, data in user_data.items():
        name = data['name'] if data['name'] else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        stats_message += f"{name} - —Å—Ç—Ä–∞–π–∫ {data['counter']} –∑ 100\n"
        if data['counter'] == 0:
            stats_message += f"{name} -  –ø–æ–º—ñ–¥–æ—Ä–∫–∞ üçÖ\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
    bot.send_message(CHANNEL_ID , stats_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
    for user_id, photos in photo_buffer.items():
        for photo in photos:
            user_name = user_data[user_id]['name'] if user_id in user_data else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            bot.send_message(CHANNEL_ID , f"{user_name} - —Å—Ç—Ä–∞–π–∫ {user_data[user_id]['counter']} –∑ 100")
            bot.send_photo(CHANNEL_ID , photo)

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    photo_buffer.clear()

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
scheduler.add_job(send_hourly_stats, CronTrigger(hour='*', minute=59))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Ü–µ —á–∞—Å–∞

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()

