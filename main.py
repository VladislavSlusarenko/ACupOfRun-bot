import telebot
import json
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime

API_TOKEN = '7338566190:AAGtOOMI8StYiU5HZ2vrkWY12QtIR6iL1n4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHANNEL_ID = '-1002302094356'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
bot = telebot.TeleBot(API_TOKEN)
scheduler = BackgroundScheduler()

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'user_data.json'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
photo_buffer = {}  # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ –∫–æ–Ω—Ü–∞ —á–∞—Å–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_data
    try:
        with open(DATA_FILE, 'r') as file:
            user_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, 'w') as file:
        json.dump(user_data, file)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

def send_first_reminder(user_id):
    if not user_data[user_id]['has_sent_photo']:
        bot.send_message(user_id, "–ß–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ üòä")

def send_second_reminder(user_id):
    if not user_data[user_id]['has_sent_photo']:
        bot.send_message(user_id, "–ù–µ –∑–∞–±—É–¥—å üòè")

def send_final_reminder(user_id):
    if not user_data[user_id]['has_sent_photo']:
        bot.send_message(user_id, "–û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å üò¢")

def reset_counter(user_id):
    name = user_data[user_id]['name']
    user_data[user_id]['counter'] = 0
    user_data[user_id]['has_sent_photo'] = False
    bot.send_message(user_id, f"–ù—É —Ç–∏ —ñ –ø–æ–º—ñ–¥–æ—Ä–∫–∞, {name} üçÖ")
    save_data()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'name': '', 'counter': 0, 'total_strikes': 0, 'has_sent_photo': False}
        bot.send_message(user_id, "–í–∞—à–µ —ñ–º‚Äô—è: üçÖ")
        print(f"–°—Ç–∞—Ä—Ç: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        save_data()
    else:
        print(f"–°—Ç–∞—Ä—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

@bot.message_handler(func=lambda message: message.from_user.id in user_data and user_data[message.from_user.id]['name'] == '')
def set_name(message):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text
    bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç, {user_data[user_id]['name']}! –¢–µ–ø–µ—Ä —è –±—É–¥—É —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(send_first_reminder, CronTrigger(minute=1), args=[user_id], id=f"{user_id}_reminder_1")
    scheduler.add_job(send_second_reminder, CronTrigger(minute=30), args=[user_id], id=f"{user_id}_reminder_2")
    scheduler.add_job(send_final_reminder, CronTrigger(minute=50), args=[user_id], id=f"{user_id}_reminder_3")

@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    user_id = message.from_user.id
    if user_id in user_data:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        user_data[user_id]['counter'] += 1
        user_data[user_id]['total_strikes'] += 1
        user_data[user_id]['has_sent_photo'] = True
        save_data()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –±—É—Ñ–µ—Ä
        if user_id not in photo_buffer:
            photo_buffer[user_id] = []
        photo_buffer[user_id].append({
            'file_id': message.photo[-1].file_id,
            'caption': f"{user_data[user_id]['name']} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ñ–æ—Ç–æ"
        })

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å—Ç—Ä–∞–π–∫–∞—Ö
        current_count = user_data[user_id]['counter']
        total_strikes = user_data[user_id]['total_strikes']
        bot.send_message(user_id, f"–°—É–ø–µ—Ä üëç –º–æ–ª–æ–¥–µ—Ü—å üòé! +1\n"
                                  f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–∞–π–∫—ñ–≤ –∑–∞—Ä–∞–∑: {current_count}\n"
                                  f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–∞–π–∫—ñ–≤: {total_strikes}")
    else:
        bot.send_message(user_id, "–í–≤–µ–¥–∏ /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.")

def send_hourly_statistics():
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞–π–∫–æ–≤
    stats_message = "–°—Ç—Ä–∞–π–∫–∏ —É—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤:\n"
    for user_id, data in user_data.items():
        name = data['name'] if data['name'] else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        strikes = data['counter']
        stats_message += f"{name} - —Å—Ç—Ä–∞–π–∫ {strikes}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–∞–Ω–∞–ª
    bot.send_message(CHANNEL_ID, stats_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
    for user_id, photos in photo_buffer.items():
        for photo in photos:
            bot.send_photo(CHANNEL_ID, photo['file_id'], caption=photo['caption'])

    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    photo_buffer.clear()

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π —á–∞—Å
scheduler.add_job(send_hourly_statistics, CronTrigger(minute=0, hour='*'))

def check_and_reset_counters():
    for user_id, data in user_data.items():
        if data['counter'] == 0:
            reset_counter(user_id)
        else:
            data['counter'] = 0
            data['has_sent_photo'] = False
    save_data()

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
scheduler.add_job(check_and_reset_counters, CronTrigger(minute=0, hour='*'))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.start()
bot.polling()
