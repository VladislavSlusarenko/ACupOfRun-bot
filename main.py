import asyncio
import schedule
import time
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
import pytz
from datetime import datetime

API_TOKEN = '7338566190:AAGtOOMI8StYiU5HZ2vrkWY12QtIR6iL1n4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
user_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async def main():
    bot = Bot(token=API_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    @dp.message(Command("start"))
    async def start_command(message: types.Message):
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        dp.message.register(get_name)

    @dp.message()
    async def get_name(message: types.Message):
        user_data[message.from_user.id] = {
            "name": message.text,
            "strike_count": 0,
            "last_photo_date": None
        }
        await message.answer(f"–í–∞—à–µ —ñ–º‚Äô—è: {message.text} üçÖ\n–Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –ø—Ä–æ —Ñ–æ—Ç–æ.")
        schedule_tasks()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    def schedule_tasks():
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—É—é –ø–µ—Ä–≤—É—é, 30-—é –∏ 50-—é –º–∏–Ω—É—Ç—É –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
        schedule.every().hour.at(":01").do(lambda: asyncio.create_task(send_hourly_message("–ß–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—î —Ñ–æ—Ç–æ üòä")))
        schedule.every().hour.at(":30").do(lambda: asyncio.create_task(send_hourly_message("–ù–µ –∑–∞–±—É–¥—å üòè")))
        schedule.every().hour.at(":50").do(lambda: asyncio.create_task(send_hourly_message("–û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å üò¢")))

    async def send_hourly_message(message_text):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¢–æ—Ä–æ–Ω—Ç–æ
        tz = pytz.timezone('America/Toronto')
        current_time = datetime.now(tz).strftime("%H:%M")
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¢–æ—Ä–æ–Ω—Ç–æ: {current_time}")  # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id, data in user_data.items():
            await bot.send_message(user_id, message_text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
            if data["last_photo_date"] != datetime.now(tz).date():
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–π–∫–æ–≤
                data["strike_count"] = 0
                data["last_photo_date"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—É

    @dp.message(lambda message: message.content_type == 'photo')
    async def handle_photo(message: types.Message):
        user_id = message.from_user.id
        if user_id not in user_data:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–π–∫–æ–≤
        user_data[user_id]["strike_count"] += 1
        user_data[user_id]["last_photo_date"] = datetime.now(pytz.timezone('America/Toronto')).date()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        await message.answer("–°—É–ø–µ—Ä üëç –º–æ–ª–æ–¥–µ—Ü—å üòé")

    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥

    # –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
